#ifndef YNAVMESH_H
#define YNAVMESH_H

#include <assert.h>
#include "OgreFastArray.h"
#include "OgreVector3.h"

class dtNavMesh; // detourNavMesh.h
class yVertexTriangleBuffer;
class yCurve;
class yObject;
class yObjectNavMesh;

/**
 * @brief The SamplePolyAreas enum used to identify areas in navmesh creation
 */
enum SamplePolyAreas
{
    SAMPLE_POLYAREA_GROUND,
    SAMPLE_POLYAREA_WATER,
    SAMPLE_POLYAREA_ROAD,
    SAMPLE_POLYAREA_DOOR,
    SAMPLE_POLYAREA_GRASS,
    SAMPLE_POLYAREA_JUMP,
};
/**
 * @brief The SamplePolyFlags enum used to mark polygons in navmesh creation
 */
enum SamplePolyFlags
{
    SAMPLE_POLYFLAGS_WALK		= 0x01,		///< Ability to walk (ground, grass, road)
    SAMPLE_POLYFLAGS_SWIM		= 0x02,		///< Ability to swim (water).
    SAMPLE_POLYFLAGS_DOOR		= 0x04,		///< Ability to move through doors.
    SAMPLE_POLYFLAGS_JUMP		= 0x08,		///< Ability to jump.
    SAMPLE_POLYFLAGS_DISABLED	= 0x10,		///< Disabled polygon
    SAMPLE_POLYFLAGS_ALL		= 0xffff	///< All abilities.
};

/**
 * @brief The yPathFind class try to find a path in a navmesh
 *
 * This class use [Recast Detour](https://github.com/recastnavigation/recastnavigation) for generate
 * a navmesh and for find path in the last.
 */
class yNavMesh
{
public:
    yNavMesh();
    ~yNavMesh();

    /**
     * @brief buildNavMesh try to build a recast navmesh by calling _buildNavMesh
     * @return The method return the points of the path
     */
    bool buildNavMesh( yVertexTriangleBuffer* vertexTriangleBuffer,
                       float walkableAngle = 45, int walkableHeight = 3, int walkableClimb = 2, int walkableRadius = 0);


    /**
     * @brief getPath method
     * @return The method return the points of the path
     */
    Ogre::FastArray<Ogre::Vector3> getPath();

    /**
     * @brief findPath try to find the route between two points in navmesh. Usually you use
     * the yObjectNavMesh method instead of this
     * @param[out] curve The curve where store the path if found. The path would be
     * in world coordinates if the #navMeshContainer is not null and is effectively
     * the container of this nav mesh (otherwise the values are indefinite), otherwise
     * the path would be in local coordinates respect the nav mesh
     * @param[in] navMeshContainer The container of this nav mesh
     * @param[in] startPos The initial local position in format [ x, y, z ]
     * @param[in] endPos The finish local position in format [ x, y, z ]
     * @return The method return true if it found a route, false otherwise
     */
    bool findPath( yCurve& curve, yObjectNavMesh* navMeshContainer, const float *startPos, const float *endPos );

private:
    /// the maximum triangles that can have the input navmesh
    size_t mTriCount;

    /// navmesh generated by recast
    dtNavMesh* mNavMesh;
    /// path found in the navmesh after a call to findPath method
    Ogre::FastArray<Ogre::Vector3> mPath;

    /**
     * @brief buildNavMesh try to build a recast navmesh
     *
     * @param[in] verts The vertex of navmesh in format [(x, y, z) * @p nverts]
     * @param[in] nverts Total of vertex
     * @param[in] tris The triangles that build the navmesh in format [(v1, v2, v3) * @p ntris]
     * @param[in] ntris Total of triangles
     * @param[in] walkableAngle Maximum angle that agent can pass
     * @param[in] walkableHeight Maximum height that agent can pass
     * @param[in] walkableClimb Maximun height that agent can jump
     * @param[in] walkableRadius Radius of agent
     * @return The method return true if it can build the navmesh, false otherwise
     */
    bool _buildNavMesh(const float *verts, const size_t nverts, const int *tris, const size_t ntris,
                      float walkableAngle, int walkableHeight, int walkableClimb, int walkableRadius);

};

#endif // YNAVMESH_H
